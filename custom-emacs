

(custom-set-variables
  ;; custom-set-variables was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(allout-auto-activation t)
 '(allout-command-prefix "")
 '(blink-cursor-mode -1)
 '(compilation-scroll-output t)
 '(cperl-close-paren-offset 0)
 '(cperl-continued-statement-offset 0)
 '(cperl-extra-newline-before-brace t)
 '(cperl-extra-newline-before-brace-multiline t)
 '(cperl-indent-level 4)
 '(cperl-label-offset -4)
 '(cperl-merge-trailing-else nil)
 '(crosshairs-mode t)
 '(crosshairs-vline-same-face-flag t)
 '(cursor-in-non-selected-windows nil)
 '(debug-on-error t)
 '(default-indicate-empty-lines t t)
 '(diary-file "~/.diary")
 '(dired-listing-switches "-al --group-directories-first")
 '(display-time-mail-face (quote letter-face) t)
 '(display-time-use-mail-icon t)
 '(ebib-additional-fields (quote (loc location isbn tag gtd own informed amazon crossref url \.\.\.)))
 '(ebib-default-type (quote book))
 '(ebib-preload-bib-files (quote ("/home/user/projs/stu/cs/cs.bib" "/home/user/projs/stu/pd/pd.bib" "/home/user/projs/stu/triumph/triumph.bib")))
 '(emms-lyrics-dir "/home/user/.sitelisp/lyrics")
 '(emms-lyrics-display-on-minibuffer t)
 '(emms-lyrics-display-on-modeline t)
 '(emms-player-list (quote (emms-player-mplayer)))
 '(epa-file-cache-passphrase-for-symmetric-encryption t)
 '(etxt-directory "/home/user/ebooks/")
 '(fill-column 80)
 '(flyspell-auto-correct-binding [C-c C-x C-z])
 '(gc-cons-threshold 2500000)
 '(global-font-lock-mode t)
 '(gnus-interactive-exit nil)
 '(gnus-read-all-available-headers t)
 '(howm-directory "~/.emacs.d/howm/")
 '(inhibit-startup-screen t)
 '(initial-scratch-message nil)
 '(kill-whole-line t)
 '(list-directory-verbose-switches "-sh")
 '(load-home-init-file t t)
 '(mew-pop-auth (quote pass))
 '(muse-project-alist (quote (("WikiPlanner" ("~/plans" :default "index" :major-mode planner-mode :visit-link planner-visit-link)))))
 '(number-of-diary-entries 3)
 '(org-agenda-custom-commands (quote (("d" todo "DELEGATED" nil) ("c" todo "DONE|DEFERRED|CANCELLED" nil) ("w" todo "WAITING" nil) ("W" agenda "" ((org-agenda-ndays 21))) ("A" agenda "" ((org-agenda-skip-function (lambda nil (org-agenda-skip-entry-if (quote notregexp) "\\=.*\\[#A\\]"))) (org-agenda-ndays 1) (org-agenda-overriding-header "Today's Priority #A tasks: "))) ("u" alltodo "" ((org-agenda-skip-function (lambda nil (org-agenda-skip-entry-if (quote scheduled) (quote deadline) (quote regexp) "<[^>
]+>"))) (org-agenda-overriding-header "Unscheduled TODO entries: "))))))
 '(org-agenda-files (quote ("~/projs/books.org" "~/projs/scratch.org" "~/projs/time.org" "~/projs/questions.org" "~/projs/ttd.org" "~/projs/week.org" "~/projs/info/obtain.org" "~/projs/log/mass.org" "~/projs/log/math.org" "~/projs/log/rx.org" "~/projs/school/ttd.org" "~/projs/school/karate.org" "~/projs/school/de/de.org" "~/projs/tasks/GTD.org" "~/projs/tasks/alia.org" "~/projs/tasks/audrey.org" "~/projs/tasks/calc.org" "~/projs/tasks/calendar.org" "~/projs/tasks/chem.org" "~/projs/tasks/events.org" "~/projs/tasks/goals.org" "~/projs/tasks/home.org" "~/projs/tasks/social.org" "~/projs/ucf/schedule.org")))
 '(org-agenda-ndays 7)
 '(org-agenda-show-all-dates t)
 '(org-agenda-skip-deadline-if-done t)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-start-on-weekday nil)
 '(org-cycle-include-plain-lists t)
 '(org-deadline-warning-days 14)
 '(org-default-notes-file "~/notes.org")
 '(org-emphasis-alist (quote (("*" bold "<b>" "</b>") ("/" italic "<i>" "</i>") ("_" underline "<u>" "</u>") ("=" green "<code>" "</code>") ("+" (:strike-through t) "<del>" "</del>") ("#" (:comment t) "" ""))))
 '(org-emphasis-regexp-components (quote (" 	('\"" "- 	.,:?;'\")" " 	
,\"'" "." 1 t)))
 '(org-export-preserve-breaks t)
 '(org-export-with-section-numbers nil)
 '(org-export-with-toc nil)
 '(org-fast-tag-selection-single-key (quote expert))
 '(org-startup-folded (quote content))
 '(pcomplete-expand-before-complete t)
 '(safe-local-variable-values (quote ((show-trailing-whitespace . t) (peano-header-prefix . ";;;") (org-export-html-style . "   &lt;style type=\"text/css\"&gt;
      p {font-weight: normal; color: gray; }
      h1 {color: black; }
  &lt;/style&gt;") (org-export-html-style . "   <style type=\"text/css\">
      p {font-weight: normal; color: gray; }
      h1 {color: black; }
  </style>") (unibyte . t) (adaptive-fill-mode . t) (adaptive-fill-regexp . "[     ]*\\([#;>*]+ +\\)?\\(?:#?[ABCD0-9] +[_X] +?\\)?") (emacs-lisp-mode . t) (auto-recompile . 1))))
 '(save-place t nil (saveplace))
 '(server-done-hook (quote ((lambda nil (kill-buffer nil)) delete-frame)))
 '(server-switch-hook (quote ((lambda nil (let (server-buf) (setq server-buf (current-buffer)) (bury-buffer) (switch-to-buffer-other-frame server-buf))))))
 '(set-scroll-bar-mode (quote right))
 '(show-paren-delay 0)
 '(show-paren-mode t)
 '(tab-width 4)
 '(table-html-th-rows 1)
 '(text-mode-hook (quote (turn-on-auto-fill text-mode-hook-identify)))
 '(timeclock-modeline-display nil nil (timeclock))
 '(tool-bar-mode nil)
 '(transient-mark-mode t)
 '(uniquify-buffer-name-style (quote forward) nil (uniquify))
 '(use-dialog-box nil)
 '(view-diary-entries-initially t)
 '(visible-bell t)
 '(w3m-default-display-inline-images t)
 '(w3m-home-page "about://bookmark/")
 '(w3m-use-tab nil)
 '(x-stretch-cursor t))
(custom-set-faces
  ;; custom-set-faces was added by Custom.
  ;; If you edit it by hand, you could mess it up, so be careful.
  ;; Your init file should contain only one such instance.
  ;; If there is more than one, they won't work right.
 '(org-level-1 ((((class color) (min-colors 88) (background light)) (:weight extra-bold))))
 '(org-level-2 ((((class color) (min-colors 16) (background light)) nil))))
